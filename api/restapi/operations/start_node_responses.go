// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/node-manager-plugin/api/models"
)

// StartNodeNoContentCode is the HTTP code returned for type StartNodeNoContent
const StartNodeNoContentCode int = 204

/*
StartNodeNoContent Node launched

swagger:response startNodeNoContent
*/
type StartNodeNoContent struct {
}

// NewStartNodeNoContent creates StartNodeNoContent with default headers values
func NewStartNodeNoContent() *StartNodeNoContent {

	return &StartNodeNoContent{}
}

// WriteResponse to the client
func (o *StartNodeNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// StartNodeInternalServerErrorCode is the HTTP code returned for type StartNodeInternalServerError
const StartNodeInternalServerErrorCode int = 500

/*
StartNodeInternalServerError Error launching node

swagger:response startNodeInternalServerError
*/
type StartNodeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewStartNodeInternalServerError creates StartNodeInternalServerError with default headers values
func NewStartNodeInternalServerError() *StartNodeInternalServerError {

	return &StartNodeInternalServerError{}
}

// WithPayload adds the payload to the start node internal server error response
func (o *StartNodeInternalServerError) WithPayload(payload *models.Error) *StartNodeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start node internal server error response
func (o *StartNodeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartNodeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
