// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/node-manager-plugin/api/models"
)

// StopNodeNoContentCode is the HTTP code returned for type StopNodeNoContent
const StopNodeNoContentCode int = 204

/*
StopNodeNoContent stop node no content

swagger:response stopNodeNoContent
*/
type StopNodeNoContent struct {
}

// NewStopNodeNoContent creates StopNodeNoContent with default headers values
func NewStopNodeNoContent() *StopNodeNoContent {

	return &StopNodeNoContent{}
}

// WriteResponse to the client
func (o *StopNodeNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// StopNodeInternalServerErrorCode is the HTTP code returned for type StopNodeInternalServerError
const StopNodeInternalServerErrorCode int = 500

/*
StopNodeInternalServerError Error stopping node

swagger:response stopNodeInternalServerError
*/
type StopNodeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewStopNodeInternalServerError creates StopNodeInternalServerError with default headers values
func NewStopNodeInternalServerError() *StopNodeInternalServerError {

	return &StopNodeInternalServerError{}
}

// WithPayload adds the payload to the stop node internal server error response
func (o *StopNodeInternalServerError) WithPayload(payload *models.Error) *StopNodeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop node internal server error response
func (o *StopNodeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopNodeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
